//
// Generated file, do not edit! Created by opp_msgc 4.4 from modules/messages/BLE_Adv_MacPkt.msg.
//

#ifndef _BLE_ADV_MACPKT_M_H_
#define _BLE_ADV_MACPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "SimpleAddress.h"
// }}

// cplusplus {{
#include "MacPkt_m.h"
// }}



/**
 * Class generated from <tt>modules/messages/BLE_Adv_MacPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet BLE_Adv_MacPkt extends MacPkt
 * {
 *     
 *      unsigned int    AccessAddress; 
 *    
 *     
 *     int 			 Adv_PDU_type;	
 *     
 *     bool			 TxAdd;
 *     bool			 RxAdd;	
 *     int 			 Length;
 *     int 			Adv_type; 
 *     
 *     
 *     
 *     LAddress::L2Type AdvA; 
 *     
 *     
 *     LAddress::L2Type InitA;
 *      
 *      LAddress::L2Type ScanA; 
 *     
 *     
 *     
 *     double AdvData; 
 *     
 *      
 *     
 *    
 *     double ScanReqData;
 *      
 *     
 *     double ScanRspData; 
 *     int temp_c;
 *     int index_r;
 *     
 *       
 *     
 *     unsigned int AA;
 *     int WinSize;
 *     int WinOffset;
 *     int Interval;
 *     int Latency;
 *     int Timeout;
 *     int MapCh0to7;
 *     int MapCh8to15;
 *     int MapCh16to23;
 *     int MapCh24to31;
 *     int MapCh32to39;
 *     int Hop;
 *     int SCA;
 * }
 * </pre>
 */
class BLE_Adv_MacPkt : public ::MacPkt
{
  protected:
    unsigned int AccessAddress_var;
    int Adv_PDU_type_var;
    bool TxAdd_var;
    bool RxAdd_var;
    int Length_var;
    int Adv_type_var;
    LAddress::L2Type AdvA_var;
    LAddress::L2Type InitA_var;
    LAddress::L2Type ScanA_var;
    double AdvData_var;
    double ScanReqData_var;
    double ScanRspData_var;
    int temp_c_var;
    int index_r_var;
    unsigned int AA_var;
    int WinSize_var;
    int WinOffset_var;
    int Interval_var;
    int Latency_var;
    int Timeout_var;
    int MapCh0to7_var;
    int MapCh8to15_var;
    int MapCh16to23_var;
    int MapCh24to31_var;
    int MapCh32to39_var;
    int Hop_var;
    int SCA_var;

  private:
    void copy(const BLE_Adv_MacPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BLE_Adv_MacPkt&);

  public:
    BLE_Adv_MacPkt(const char *name=NULL, int kind=0);
    BLE_Adv_MacPkt(const BLE_Adv_MacPkt& other);
    virtual ~BLE_Adv_MacPkt();
    BLE_Adv_MacPkt& operator=(const BLE_Adv_MacPkt& other);
    virtual BLE_Adv_MacPkt *dup() const {return new BLE_Adv_MacPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getAccessAddress() const;
    virtual void setAccessAddress(unsigned int AccessAddress);
    virtual int getAdv_PDU_type() const;
    virtual void setAdv_PDU_type(int Adv_PDU_type);
    virtual bool getTxAdd() const;
    virtual void setTxAdd(bool TxAdd);
    virtual bool getRxAdd() const;
    virtual void setRxAdd(bool RxAdd);
    virtual int getLength() const;
    virtual void setLength(int Length);
    virtual int getAdv_type() const;
    virtual void setAdv_type(int Adv_type);
    virtual LAddress::L2Type& getAdvA();
    virtual const LAddress::L2Type& getAdvA() const {return const_cast<BLE_Adv_MacPkt*>(this)->getAdvA();}
    virtual void setAdvA(const LAddress::L2Type& AdvA);
    virtual LAddress::L2Type& getInitA();
    virtual const LAddress::L2Type& getInitA() const {return const_cast<BLE_Adv_MacPkt*>(this)->getInitA();}
    virtual void setInitA(const LAddress::L2Type& InitA);
    virtual LAddress::L2Type& getScanA();
    virtual const LAddress::L2Type& getScanA() const {return const_cast<BLE_Adv_MacPkt*>(this)->getScanA();}
    virtual void setScanA(const LAddress::L2Type& ScanA);
    virtual double getAdvData() const;
    virtual void setAdvData(double AdvData);
    virtual double getScanReqData() const;
    virtual void setScanReqData(double ScanReqData);
    virtual double getScanRspData() const;
    virtual void setScanRspData(double ScanRspData);
    virtual int getTemp_c() const;
    virtual void setTemp_c(int temp_c);
    virtual int getIndex_r() const;
    virtual void setIndex_r(int index_r);
    virtual unsigned int getAA() const;
    virtual void setAA(unsigned int AA);
    virtual int getWinSize() const;
    virtual void setWinSize(int WinSize);
    virtual int getWinOffset() const;
    virtual void setWinOffset(int WinOffset);
    virtual int getInterval() const;
    virtual void setInterval(int Interval);
    virtual int getLatency() const;
    virtual void setLatency(int Latency);
    virtual int getTimeout() const;
    virtual void setTimeout(int Timeout);
    virtual int getMapCh0to7() const;
    virtual void setMapCh0to7(int MapCh0to7);
    virtual int getMapCh8to15() const;
    virtual void setMapCh8to15(int MapCh8to15);
    virtual int getMapCh16to23() const;
    virtual void setMapCh16to23(int MapCh16to23);
    virtual int getMapCh24to31() const;
    virtual void setMapCh24to31(int MapCh24to31);
    virtual int getMapCh32to39() const;
    virtual void setMapCh32to39(int MapCh32to39);
    virtual int getHop() const;
    virtual void setHop(int Hop);
    virtual int getSCA() const;
    virtual void setSCA(int SCA);
};

inline void doPacking(cCommBuffer *b, BLE_Adv_MacPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BLE_Adv_MacPkt& obj) {obj.parsimUnpack(b);}


#endif // _BLE_ADV_MACPKT_M_H_
